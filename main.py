import os
import telebot
from openai import OpenAI
from flask import Flask, request
import logging
import sqlite3
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
APP_URL = os.getenv("APP_URL")  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, https://—Ç–≤—ñ–π-–ø—Ä–æ—î–∫—Ç.railway.app

if not BOT_TOKEN:
    raise ValueError("–ü–æ–º–∏–ª–∫–∞: BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
if not OPENAI_API_KEY:
    raise ValueError("–ü–æ–º–∏–ª–∫–∞: OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
if not APP_URL:
    raise ValueError("–ü–æ–º–∏–ª–∫–∞: APP_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π —ñ–∑ —Ñ–∞–π–ª—É
try:
    with open("instructions.txt", "r", encoding="utf-8") as file:
        system_prompt = file.read()
except FileNotFoundError:
    system_prompt = (
        "–¢–∏ –®–Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –∫—Ä–µ–∞—Ç–æ—Ä—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. "
        "–°–ø—ñ–ª–∫—É–π—Å—è –¥—Ä—É–∂–Ω—å–æ, —è–∫ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –¥—Ä—É–≥, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∑ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è YouTube, Instagram, TikTok —Ç–∞ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü—ñ—î—é. "
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ–∫—Ä–æ–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó, –ø—Ä–∏–∫–ª–∞–¥–∏ —Ç–∞ –ª–µ–≥–∫–∏–π –≥—É–º–æ—Ä. "
        "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—Ç–∞—î, —Ö—Ç–æ —Ç–∏, –Ω–∞–≥–∞–¥—É–π, —â–æ —Ç–∏ –®–Ü. "
        "–Ø–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Ç–µ–º –∫—Ä–µ–∞—Ç–æ—Ä—ñ–≤, –≤–≤—ñ—á–ª–∏–≤–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤ –¥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å."
    )

# –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—ñ–≤
chat_history = {}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SQLite
def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            phone_number TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —É –±–∞–∑—É
def save_contact(user_id, username, phone_number):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, username, phone_number) VALUES (?, ?, ?)",
        (user_id, username, phone_number)
    )
    conn.commit()
    conn.close()

# –û–±—Ä–æ–±–Ω–∏–∫ Webhook
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_json())
    bot.process_new_updates([update])
    return "OK", 200

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    keyboard.add(button)
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –®–Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –∫—Ä–µ–∞—Ç–æ—Ä—ñ–≤, —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —ñ–∑ YouTube, Instagram —ñ TikTok. üòé "
        "–ü–æ–¥—ñ–ª–∏—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —â–æ–± —è –º—ñ–≥ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç–≤–æ—ó –¥–∞–Ω—ñ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π!",
        reply_markup=keyboard
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    user_id = message.from_user.id
    username = message.from_user.username
    phone_number = message.contact.phone_number

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –≤ –±–∞–∑—É
    save_contact(user_id, username, phone_number)
    
    bot.reply_to(
        message,
        f"–î—è–∫—É—é, {message.from_user.first_name}! –¢–≤—ñ–π –Ω–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ. üòä "
        "–¢–µ–ø–µ—Ä –º–æ–∂–µ—à –ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ —á–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü—ñ—é!"
    )
    # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
    bot.reply_to(message, "–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—Ä–∏–±—Ä–∞–Ω–∞.", reply_markup=telebot.types.ReplyKeyboardRemove())

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(content_types=['text'])
def handle_message(message):
    user_id = message.from_user.id
    user_message = message.text

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in chat_history:
        chat_history[user_id] = [{"role": "system", "content": system_prompt}]

    # –î–æ–¥–∞–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    chat_history[user_id].append({"role": "user", "content": user_message})

    try:
        # –ó–∞–ø–∏—Ç –¥–æ ChatGPT
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=chat_history[user_id],
            max_tokens=150
        )

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        bot_response = response.choices[0].message.content
        chat_history[user_id].append({"role": "assistant", "content": bot_response})

        # –û–±–º–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
        if len(chat_history[user_id]) > 10:
            chat_history[user_id] = chat_history[user_id][-10:]

        # –î–æ–¥–∞–π –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ —Ü–µ –®–Ü (–∫–æ–∂–Ω—ñ 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
        if len(chat_history[user_id]) % 5 == 0:
            bot_response += "\n–î–æ —Ä–µ—á—ñ, —è –®–Ü, –∞–ª–µ —Å—Ç–∞—Ä–∞—é—Å—è –±—É—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–∏—Å–Ω–∏–º! üòä"

        bot.reply_to(message, bot_response)

    except Exception as e:
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Webhook
@app.route("/")
def index():
    bot.remove_webhook()
    bot.set_webhook(url=f"{APP_URL}/{BOT_TOKEN}")
    return "Webhook set", 200

# –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    bot.remove_webhook()  # –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π Webhook
    bot.set_webhook(url=f"{APP_URL}/{BOT_TOKEN}")
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
